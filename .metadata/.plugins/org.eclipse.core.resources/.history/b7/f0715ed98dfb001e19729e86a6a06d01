package controller;
//controller servlet 으로 만들기
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.MemberVO;
import service.MemberService;
import service.MemberServiceImpl;

@WebServlet("/memb/*")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	//로그 객체 가져오기
	private static final Logger log=LoggerFactory.getLogger(MemberController.class);
	//rgb 객체 requesDispatcher:요청객체 대한 응답 데이터를 jsp 로 전송하는 역할
	private RequestDispatcher rdp;
	//destapage :목적지 주소
	private String destPage;
	
	//isOk
	private int isOk;
	
	//service
	private MemberService msv;//service ->interface로 생성
       
  
    public MemberController() {
        msv=new MemberServiceImpl(); //service ->class implement MemberSevice
       
    }

	
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//통합처리
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String uri=request.getRequestURI();
		log.info(uri);
		
		String path=uri.substring(uri.lastIndexOf("/")+1);
		log.info(path);
		
		switch(path) {
		case "join":
			//index의 join 버튼 클릭시
			destPage="/member/join.jsp";
			break;
		case "register":
			try {
				//jsp 에서 보내기
				String id=request.getParameter("id");
				String pwd=request.getParameter("pwd");
				String email=request.getParameter("email");
				int age=Integer.parseInt(request.getParameter("age"));
				String phone=request.getParameter("phone");
				
				MemberVO mvo=new MemberVO(id, pwd, email, age, phone);
				log.info("join mvo>>>{}",mvo);
				isOk=msv.register(mvo);
				log.info("join>>",(isOk>0)?"Ok":"Fail");
				destPage="/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "login":	
			try {
				//jsp 에서 보내온 id,pwd 를 일단 객체로 받아야한다
				//id와 pwd 객체로 만들어 db에가서 같은객체가 잇는지 확인
				//같은 값을 갖는 객체가 있다면 로그인(세션객체 값을 저장)
				//session:모든 jsp에서 공유되는 객체 /브라우저가 종료되면 삭제
				String id=request.getParameter("id");
				String pwd=request.getParameter("pwd");
				MemberVO mvo=new MemberVO(id, pwd);
				log.info("login>>>>{}",mvo);
				//id 와 pwd 일치하는 객체를 전부를 리턴 받아야한다
				MemberVO loginMvo=msv.login(mvo);
				log.info("return loginMvo>>>>{}",loginMvo);
				//loginMvo 객체가 없다면... null 이라고 뜬다
				if(loginMvo!=null) {
					//session 저장
					//세션 객체 가져오기
					//연결된 세션 객체가 있다면 기존 객체를 가져오고, 없으면 생성
					HttpSession ses=request.getSession();
					ses.setAttribute("ses", loginMvo);
					ses.setMaxInactiveInterval(10*60);//로그인 유지 시간 
				}else {
					//로그인 객체가 없다면
					//index.jsp로 메시지 전송
					request.setAttribute("msg_login", -1);
				}
				destPage="/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case"logout":
			try {
				//session 에 값이 있다면 해당 세션 연결 끊어라
				HttpSession ses=request.getSession();
				
				MemberVO mvo=(MemberVO)ses.getAttribute("ses");
				log.info("ses에서 추출한 mvo>>{}",mvo);
				
				isOk=msv.lastLogin(mvo.getId());
				log.info("lastLogin>>",(isOk>0)?"Ok":"Fail");
				ses.invalidate();//세션무효화
				destPage="/index.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "list":
			try {
				List<MemberVO> list=msv.getList();
				request.setAttribute("list", list);
				destPage="/member/list.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "modify":
			try {
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		case "update":
			try {
				//실제 데이터 수정
				String id=request.getParameter("id");
				String pwd=request.getParameter("pwd");
				String email=request.getParameter("email");
				int age=Integer.parseInt(request.getParameter("age"));
				String phone=request.getParameter("phone")
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
		//목적지 이동 설정
		rdp=request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//method get으로 들어오는 처리
		service(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//method post로 오는 처리
		service(request, response);
	}

}
